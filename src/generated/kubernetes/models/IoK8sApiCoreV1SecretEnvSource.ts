/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
/**
 * SecretEnvSource selects a Secret to populate the environment variables with.
 * 
 * The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
 * @export
 * @interface IoK8sApiCoreV1SecretEnvSource
 */
export interface IoK8sApiCoreV1SecretEnvSource {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1SecretEnvSource
     */
    name?: string;
    /**
     * Specify whether the Secret must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecretEnvSource
     */
    optional?: boolean;
}

/**
 * Check if a given object implements the IoK8sApiCoreV1SecretEnvSource interface.
 */
export function instanceOfIoK8sApiCoreV1SecretEnvSource(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IoK8sApiCoreV1SecretEnvSourceFromJSON(json: any): IoK8sApiCoreV1SecretEnvSource {
    return IoK8sApiCoreV1SecretEnvSourceFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1SecretEnvSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1SecretEnvSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'optional': !exists(json, 'optional') ? undefined : json['optional'],
    };
}

export function IoK8sApiCoreV1SecretEnvSourceToJSON(value?: IoK8sApiCoreV1SecretEnvSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'optional': value.optional,
    };
}

