/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
import type { V1CPUFeature } from './V1CPUFeature';
import {
    V1CPUFeatureFromJSON,
    V1CPUFeatureFromJSONTyped,
    V1CPUFeatureToJSON,
} from './V1CPUFeature';

/**
 * CPUPreferences contains various optional CPU preferences.
 * @export
 * @interface V1beta1CPUPreferences
 */
export interface V1beta1CPUPreferences {
    /**
     * PreferredCPUFeatures optionally defines a slice of preferred CPU features.
     * @type {Array<V1CPUFeature>}
     * @memberof V1beta1CPUPreferences
     */
    preferredCPUFeatures?: Array<V1CPUFeature>;
    /**
     * PreferredCPUTopology optionally defines the preferred guest visible CPU topology, defaults to PreferSockets.
     * @type {string}
     * @memberof V1beta1CPUPreferences
     */
    preferredCPUTopology?: string;
}

/**
 * Check if a given object implements the V1beta1CPUPreferences interface.
 */
export function instanceOfV1beta1CPUPreferences(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1beta1CPUPreferencesFromJSON(json: any): V1beta1CPUPreferences {
    return V1beta1CPUPreferencesFromJSONTyped(json, false);
}

export function V1beta1CPUPreferencesFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1CPUPreferences {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'preferredCPUFeatures': !exists(json, 'preferredCPUFeatures') ? undefined : ((json['preferredCPUFeatures'] as Array<any>).map(V1CPUFeatureFromJSON)),
        'preferredCPUTopology': !exists(json, 'preferredCPUTopology') ? undefined : json['preferredCPUTopology'],
    };
}

export function V1beta1CPUPreferencesToJSON(value?: V1beta1CPUPreferences | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'preferredCPUFeatures': value.preferredCPUFeatures === undefined ? undefined : ((value.preferredCPUFeatures as Array<any>).map(V1CPUFeatureToJSON)),
        'preferredCPUTopology': value.preferredCPUTopology,
    };
}

