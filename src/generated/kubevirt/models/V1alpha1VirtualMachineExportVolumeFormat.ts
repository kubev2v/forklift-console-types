/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../runtime';
/**
 * VirtualMachineExportVolumeFormat contains the format type and URL to get the volume in that format
 * @export
 * @interface V1alpha1VirtualMachineExportVolumeFormat
 */
export interface V1alpha1VirtualMachineExportVolumeFormat {
    /**
     * Format is the format of the image at the specified URL
     * @type {string}
     * @memberof V1alpha1VirtualMachineExportVolumeFormat
     */
    format: string;
    /**
     * Url is the url that contains the volume in the format specified
     * @type {string}
     * @memberof V1alpha1VirtualMachineExportVolumeFormat
     */
    url: string;
}

/**
 * Check if a given object implements the V1alpha1VirtualMachineExportVolumeFormat interface.
 */
export function instanceOfV1alpha1VirtualMachineExportVolumeFormat(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "format" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function V1alpha1VirtualMachineExportVolumeFormatFromJSON(json: any): V1alpha1VirtualMachineExportVolumeFormat {
    return V1alpha1VirtualMachineExportVolumeFormatFromJSONTyped(json, false);
}

export function V1alpha1VirtualMachineExportVolumeFormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha1VirtualMachineExportVolumeFormat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'format': json['format'],
        'url': json['url'],
    };
}

export function V1alpha1VirtualMachineExportVolumeFormatToJSON(value?: V1alpha1VirtualMachineExportVolumeFormat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'format': value.format,
        'url': value.url,
    };
}

