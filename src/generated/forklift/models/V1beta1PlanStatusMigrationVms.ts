/**
 * 
 * 
 *
 * The version of the OpenAPI document: 
 * Contact Email: 
 * License: 
 *
 * NOTE: This file is auto generated by crdtotypes (https://github.com/yaacov/crdtoapi/).
 * https://github.com/yaacov/crdtoapi/README.crdtotypes
 */

import { V1beta1PlanStatusMigrationVmsConditions } from './V1beta1PlanStatusMigrationVmsConditions';
import { V1beta1PlanStatusMigrationVmsError } from './V1beta1PlanStatusMigrationVmsError';
import { V1beta1PlanStatusMigrationVmsHooks } from './V1beta1PlanStatusMigrationVmsHooks';
import { V1beta1PlanStatusMigrationVmsLuks } from './V1beta1PlanStatusMigrationVmsLuks';
import { V1beta1PlanStatusMigrationVmsPipeline } from './V1beta1PlanStatusMigrationVmsPipeline';
import { V1beta1PlanStatusMigrationVmsWarm } from './V1beta1PlanStatusMigrationVmsWarm';

/**
 * VM Status
 *
 * @export
 */
export interface V1beta1PlanStatusMigrationVms {
  /** completed
   * Completed timestamp.
   *
   * @required {false}
   * @format {date-time}
   */
  completed?: string;
  /** conditions
   * Condition
   *
   * @required {false}
   */
  conditions?: V1beta1PlanStatusMigrationVmsConditions[];
  /** error
   * Errors
   *
   * @required {false}
   */
  error?: V1beta1PlanStatusMigrationVmsError;
  /** firmware
   * The firmware type detected from the OVF file produced by virt-v2v.
   *
   * @required {false}
   */
  firmware?: string;
  /** hooks
   * Plan hook.
   *
   * @required {false}
   */
  hooks?: V1beta1PlanStatusMigrationVmsHooks[];
  /** id
   * The object ID.
vsphere:
  The managed object ID.
   *
   * @required {false}
   */
  id?: string;
  /** instanceType
   * Selected InstanceType that will override the VM properties.
   *
   * @required {false}
   */
  instanceType?: string;
  /** luks
   * Disk decryption LUKS keys
   *
   * @required {false}
   */
  luks?: V1beta1PlanStatusMigrationVmsLuks;
  /** name
   * An object Name.
vsphere:
  A qualified name.
   *
   * @required {false}
   */
  name?: string;
  /** namespace
   * The VM Namespace
Only relevant for an openshift source.
   *
   * @required {false}
   */
  namespace?: string;
  /** networkNameTemplate
   * NetworkNameTemplate is a template for generating network interface names in the target virtual machine.
It follows Go template syntax and has access to the following variables:
  - .NetworkName: If target network is multus, name of the Multus network attachment definition, empty otherwise.
  - .NetworkNamespace: If target network is multus, namespace where the network attachment definition is located.
  - .NetworkType: type of the network ("Multus" or "Pod")
  - .NetworkIndex: sequential index of the network interface (0-based)
The template can be used to customize network interface names based on target network configuration.
Note:
  - This template will override at the plan level template
  - If not specified on VM level and on Plan leverl, default naming conventions will be used
Examples:
  "net-{{.NetworkIndex}}"
  "{{if eq .NetworkType "Pod"}}pod{{else}}multus-{{.NetworkIndex}}{{end}}"
   *
   * @required {false}
   */
  networkNameTemplate?: string;
  /** newName
   * The new name of the VM after matching DNS1123 requirements.
   *
   * @required {false}
   */
  newName?: string;
  /** operatingSystem
   * The Operating System detected by virt-v2v.
   *
   * @required {false}
   */
  operatingSystem?: string;
  /** phase
   * Phase
   *
   * @required {true}
   */
  phase: string;
  /** pipeline
   * Pipeline step.
   *
   * @required {true}
   */
  pipeline: V1beta1PlanStatusMigrationVmsPipeline[];
  /** pvcNameTemplate
   * PVCNameTemplate is a template for generating PVC names for VM disks.
It follows Go template syntax and has access to the following variables:
  - .VmName: name of the VM
  - .PlanName: name of the migration plan
  - .DiskIndex: initial volume index of the disk
  - .RootDiskIndex: index of the root disk
  - .Shared: true if the volume is shared by multiple VMs, false otherwise
Note:
  This template overrides the plan level template.
Examples:
  "{{.VmName}}-disk-{{.DiskIndex}}"
  "{{if eq .DiskIndex .RootDiskIndex}}root{{else}}data{{end}}-{{.DiskIndex}}"
  "{{if .Shared}}shared-{{end}}{{.VmName}}-{{.DiskIndex}}"
   *
   * @required {false}
   */
  pvcNameTemplate?: string;
  /** restorePowerState
   * Source VM power state before migration.
   *
   * @required {false}
   */
  restorePowerState?: string;
  /** rootDisk
   * Choose the primary disk the VM boots from
   *
   * @required {false}
   */
  rootDisk?: string;
  /** started
   * Started timestamp.
   *
   * @required {false}
   * @format {date-time}
   */
  started?: string;
  /** targetName
   * TargetName specifies a custom name for the VM in the target cluster.
If not provided, the original VM name will be used and automatically adjusted to meet k8s DNS1123 requirements.
If provided, this exact name will be used instead. The migration will fail if the name is not unique or already in use.
   *
   * @required {false}
   */
  targetName?: string;
  /** type
   * Type used to qualify the name.
   *
   * @required {false}
   */
  type?: string;
  /** volumeNameTemplate
   * VolumeNameTemplate is a template for generating volume interface names in the target virtual machine.
It follows Go template syntax and has access to the following variables:
  - .PVCName: name of the PVC mounted to the VM using this volume
  - .VolumeIndex: sequential index of the volume interface (0-based)
Note:
  - This template will override at the plan level template
  - If not specified on VM level and on Plan leverl, default naming conventions will be used
Examples:
  "disk-{{.VolumeIndex}}"
  "pvc-{{.PVCName}}"
   *
   * @required {false}
   */
  volumeNameTemplate?: string;
  /** warm
   * Warm migration status
   *
   * @required {false}
   */
  warm?: V1beta1PlanStatusMigrationVmsWarm;
}
