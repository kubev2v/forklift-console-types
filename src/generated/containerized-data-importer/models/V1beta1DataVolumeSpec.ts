/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
import type { V1beta1DataVolumeSource } from './V1beta1DataVolumeSource';
import {
    V1beta1DataVolumeSourceFromJSON,
    V1beta1DataVolumeSourceFromJSONTyped,
    V1beta1DataVolumeSourceToJSON,
} from './V1beta1DataVolumeSource';
import type { V1beta1StorageSpec } from './V1beta1StorageSpec';
import {
    V1beta1StorageSpecFromJSON,
    V1beta1StorageSpecFromJSONTyped,
    V1beta1StorageSpecToJSON,
} from './V1beta1StorageSpec';
import type { V1PersistentVolumeClaimSpec } from './V1PersistentVolumeClaimSpec';
import {
    V1PersistentVolumeClaimSpecFromJSON,
    V1PersistentVolumeClaimSpecFromJSONTyped,
    V1PersistentVolumeClaimSpecToJSON,
} from './V1PersistentVolumeClaimSpec';
import type { V1beta1DataVolumeSourceRef } from './V1beta1DataVolumeSourceRef';
import {
    V1beta1DataVolumeSourceRefFromJSON,
    V1beta1DataVolumeSourceRefFromJSONTyped,
    V1beta1DataVolumeSourceRefToJSON,
} from './V1beta1DataVolumeSourceRef';
import type { V1beta1DataVolumeCheckpoint } from './V1beta1DataVolumeCheckpoint';
import {
    V1beta1DataVolumeCheckpointFromJSON,
    V1beta1DataVolumeCheckpointFromJSONTyped,
    V1beta1DataVolumeCheckpointToJSON,
} from './V1beta1DataVolumeCheckpoint';

/**
 * DataVolumeSpec defines the DataVolume type specification
 * @export
 * @interface V1beta1DataVolumeSpec
 */
export interface V1beta1DataVolumeSpec {
    /**
     * Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
     * @type {Array<V1beta1DataVolumeCheckpoint>}
     * @memberof V1beta1DataVolumeSpec
     */
    checkpoints?: Array<V1beta1DataVolumeCheckpoint>;
    /**
     * DataVolumeContentType options: "kubevirt", "archive"
     * @type {string}
     * @memberof V1beta1DataVolumeSpec
     */
    contentType?: string;
    /**
     * FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
     * @type {boolean}
     * @memberof V1beta1DataVolumeSpec
     */
    finalCheckpoint?: boolean;
    /**
     * Preallocation controls whether storage for DataVolumes should be allocated in advance.
     * @type {boolean}
     * @memberof V1beta1DataVolumeSpec
     */
    preallocation?: boolean;
    /**
     * PriorityClassName for Importer, Cloner and Uploader pod
     * @type {string}
     * @memberof V1beta1DataVolumeSpec
     */
    priorityClassName?: string;
    /**
     * 
     * @type {V1PersistentVolumeClaimSpec}
     * @memberof V1beta1DataVolumeSpec
     */
    pvc?: V1PersistentVolumeClaimSpec;
    /**
     * 
     * @type {V1beta1DataVolumeSource}
     * @memberof V1beta1DataVolumeSpec
     */
    source?: V1beta1DataVolumeSource;
    /**
     * 
     * @type {V1beta1DataVolumeSourceRef}
     * @memberof V1beta1DataVolumeSpec
     */
    sourceRef?: V1beta1DataVolumeSourceRef;
    /**
     * 
     * @type {V1beta1StorageSpec}
     * @memberof V1beta1DataVolumeSpec
     */
    storage?: V1beta1StorageSpec;
}

/**
 * Check if a given object implements the V1beta1DataVolumeSpec interface.
 */
export function instanceOfV1beta1DataVolumeSpec(value: object): value is V1beta1DataVolumeSpec {
    return true;
}

export function V1beta1DataVolumeSpecFromJSON(json: any): V1beta1DataVolumeSpec {
    return V1beta1DataVolumeSpecFromJSONTyped(json, false);
}

export function V1beta1DataVolumeSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1DataVolumeSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'checkpoints': json['checkpoints'] == null ? undefined : ((json['checkpoints'] as Array<any>).map(V1beta1DataVolumeCheckpointFromJSON)),
        'contentType': json['contentType'] == null ? undefined : json['contentType'],
        'finalCheckpoint': json['finalCheckpoint'] == null ? undefined : json['finalCheckpoint'],
        'preallocation': json['preallocation'] == null ? undefined : json['preallocation'],
        'priorityClassName': json['priorityClassName'] == null ? undefined : json['priorityClassName'],
        'pvc': json['pvc'] == null ? undefined : V1PersistentVolumeClaimSpecFromJSON(json['pvc']),
        'source': json['source'] == null ? undefined : V1beta1DataVolumeSourceFromJSON(json['source']),
        'sourceRef': json['sourceRef'] == null ? undefined : V1beta1DataVolumeSourceRefFromJSON(json['sourceRef']),
        'storage': json['storage'] == null ? undefined : V1beta1StorageSpecFromJSON(json['storage']),
    };
}

export function V1beta1DataVolumeSpecToJSON(value?: V1beta1DataVolumeSpec | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'checkpoints': value['checkpoints'] == null ? undefined : ((value['checkpoints'] as Array<any>).map(V1beta1DataVolumeCheckpointToJSON)),
        'contentType': value['contentType'],
        'finalCheckpoint': value['finalCheckpoint'],
        'preallocation': value['preallocation'],
        'priorityClassName': value['priorityClassName'],
        'pvc': V1PersistentVolumeClaimSpecToJSON(value['pvc']),
        'source': V1beta1DataVolumeSourceToJSON(value['source']),
        'sourceRef': V1beta1DataVolumeSourceRefToJSON(value['sourceRef']),
        'storage': V1beta1StorageSpecToJSON(value['storage']),
    };
}

