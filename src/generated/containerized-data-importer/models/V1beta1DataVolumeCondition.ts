/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
/**
 * DataVolumeCondition represents the state of a data volume condition.
 * @export
 * @interface V1beta1DataVolumeCondition
 */
export interface V1beta1DataVolumeCondition {
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {Date}
     * @memberof V1beta1DataVolumeCondition
     */
    lastHeartbeatTime?: Date;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {Date}
     * @memberof V1beta1DataVolumeCondition
     */
    lastTransitionTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof V1beta1DataVolumeCondition
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof V1beta1DataVolumeCondition
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof V1beta1DataVolumeCondition
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof V1beta1DataVolumeCondition
     */
    type: string;
}

/**
 * Check if a given object implements the V1beta1DataVolumeCondition interface.
 */
export function instanceOfV1beta1DataVolumeCondition(value: object): value is V1beta1DataVolumeCondition {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function V1beta1DataVolumeConditionFromJSON(json: any): V1beta1DataVolumeCondition {
    return V1beta1DataVolumeConditionFromJSONTyped(json, false);
}

export function V1beta1DataVolumeConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1DataVolumeCondition {
    if (json == null) {
        return json;
    }
    return {
        
        'lastHeartbeatTime': json['lastHeartbeatTime'] == null ? undefined : (new Date(json['lastHeartbeatTime'])),
        'lastTransitionTime': json['lastTransitionTime'] == null ? undefined : (new Date(json['lastTransitionTime'])),
        'message': json['message'] == null ? undefined : json['message'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'status': json['status'],
        'type': json['type'],
    };
}

export function V1beta1DataVolumeConditionToJSON(value?: V1beta1DataVolumeCondition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'lastHeartbeatTime': value['lastHeartbeatTime'] == null ? undefined : ((value['lastHeartbeatTime']).toISOString()),
        'lastTransitionTime': value['lastTransitionTime'] == null ? undefined : ((value['lastTransitionTime']).toISOString()),
        'message': value['message'],
        'reason': value['reason'],
        'status': value['status'],
        'type': value['type'],
    };
}

