/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
import type { V1beta1DataSourceCondition } from './V1beta1DataSourceCondition';
import {
    V1beta1DataSourceConditionFromJSON,
    V1beta1DataSourceConditionFromJSONTyped,
    V1beta1DataSourceConditionToJSON,
} from './V1beta1DataSourceCondition';
import type { V1beta1DataSourceSource } from './V1beta1DataSourceSource';
import {
    V1beta1DataSourceSourceFromJSON,
    V1beta1DataSourceSourceFromJSONTyped,
    V1beta1DataSourceSourceToJSON,
} from './V1beta1DataSourceSource';

/**
 * DataSourceStatus provides the most recently observed status of the DataSource
 * @export
 * @interface V1beta1DataSourceStatus
 */
export interface V1beta1DataSourceStatus {
    /**
     * 
     * @type {Array<V1beta1DataSourceCondition>}
     * @memberof V1beta1DataSourceStatus
     */
    conditions?: Array<V1beta1DataSourceCondition>;
    /**
     * 
     * @type {V1beta1DataSourceSource}
     * @memberof V1beta1DataSourceStatus
     */
    source?: V1beta1DataSourceSource;
}

/**
 * Check if a given object implements the V1beta1DataSourceStatus interface.
 */
export function instanceOfV1beta1DataSourceStatus(value: object): value is V1beta1DataSourceStatus {
    return true;
}

export function V1beta1DataSourceStatusFromJSON(json: any): V1beta1DataSourceStatus {
    return V1beta1DataSourceStatusFromJSONTyped(json, false);
}

export function V1beta1DataSourceStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1DataSourceStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'conditions': json['conditions'] == null ? undefined : ((json['conditions'] as Array<any>).map(V1beta1DataSourceConditionFromJSON)),
        'source': json['source'] == null ? undefined : V1beta1DataSourceSourceFromJSON(json['source']),
    };
}

export function V1beta1DataSourceStatusToJSON(value?: V1beta1DataSourceStatus | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conditions': value['conditions'] == null ? undefined : ((value['conditions'] as Array<any>).map(V1beta1DataSourceConditionToJSON)),
        'source': V1beta1DataSourceSourceToJSON(value['source']),
    };
}

