/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
import type { V1beta1DataImportCronCondition } from './V1beta1DataImportCronCondition';
import {
    V1beta1DataImportCronConditionFromJSON,
    V1beta1DataImportCronConditionFromJSONTyped,
    V1beta1DataImportCronConditionToJSON,
} from './V1beta1DataImportCronCondition';
import type { V1beta1DataVolumeSourcePVC } from './V1beta1DataVolumeSourcePVC';
import {
    V1beta1DataVolumeSourcePVCFromJSON,
    V1beta1DataVolumeSourcePVCFromJSONTyped,
    V1beta1DataVolumeSourcePVCToJSON,
} from './V1beta1DataVolumeSourcePVC';
import type { V1beta1ImportStatus } from './V1beta1ImportStatus';
import {
    V1beta1ImportStatusFromJSON,
    V1beta1ImportStatusFromJSONTyped,
    V1beta1ImportStatusToJSON,
} from './V1beta1ImportStatus';

/**
 * DataImportCronStatus provides the most recently observed status of the DataImportCron
 * @export
 * @interface V1beta1DataImportCronStatus
 */
export interface V1beta1DataImportCronStatus {
    /**
     * 
     * @type {Array<V1beta1DataImportCronCondition>}
     * @memberof V1beta1DataImportCronStatus
     */
    conditions?: Array<V1beta1DataImportCronCondition>;
    /**
     * CurrentImports are the imports in progress. Currently only a single import is supported.
     * @type {Array<V1beta1ImportStatus>}
     * @memberof V1beta1DataImportCronStatus
     */
    currentImports?: Array<V1beta1ImportStatus>;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {Date}
     * @memberof V1beta1DataImportCronStatus
     */
    lastExecutionTimestamp?: Date;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {Date}
     * @memberof V1beta1DataImportCronStatus
     */
    lastImportTimestamp?: Date;
    /**
     * 
     * @type {V1beta1DataVolumeSourcePVC}
     * @memberof V1beta1DataImportCronStatus
     */
    lastImportedPVC?: V1beta1DataVolumeSourcePVC;
    /**
     * SourceFormat defines the format of the DataImportCron-created disk image sources
     * @type {string}
     * @memberof V1beta1DataImportCronStatus
     */
    sourceFormat?: string;
}

/**
 * Check if a given object implements the V1beta1DataImportCronStatus interface.
 */
export function instanceOfV1beta1DataImportCronStatus(value: object): value is V1beta1DataImportCronStatus {
    return true;
}

export function V1beta1DataImportCronStatusFromJSON(json: any): V1beta1DataImportCronStatus {
    return V1beta1DataImportCronStatusFromJSONTyped(json, false);
}

export function V1beta1DataImportCronStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1DataImportCronStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'conditions': json['conditions'] == null ? undefined : ((json['conditions'] as Array<any>).map(V1beta1DataImportCronConditionFromJSON)),
        'currentImports': json['currentImports'] == null ? undefined : ((json['currentImports'] as Array<any>).map(V1beta1ImportStatusFromJSON)),
        'lastExecutionTimestamp': json['lastExecutionTimestamp'] == null ? undefined : (new Date(json['lastExecutionTimestamp'])),
        'lastImportTimestamp': json['lastImportTimestamp'] == null ? undefined : (new Date(json['lastImportTimestamp'])),
        'lastImportedPVC': json['lastImportedPVC'] == null ? undefined : V1beta1DataVolumeSourcePVCFromJSON(json['lastImportedPVC']),
        'sourceFormat': json['sourceFormat'] == null ? undefined : json['sourceFormat'],
    };
}

export function V1beta1DataImportCronStatusToJSON(value?: V1beta1DataImportCronStatus | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conditions': value['conditions'] == null ? undefined : ((value['conditions'] as Array<any>).map(V1beta1DataImportCronConditionToJSON)),
        'currentImports': value['currentImports'] == null ? undefined : ((value['currentImports'] as Array<any>).map(V1beta1ImportStatusToJSON)),
        'lastExecutionTimestamp': value['lastExecutionTimestamp'] == null ? undefined : ((value['lastExecutionTimestamp']).toISOString()),
        'lastImportTimestamp': value['lastImportTimestamp'] == null ? undefined : ((value['lastImportTimestamp']).toISOString()),
        'lastImportedPVC': V1beta1DataVolumeSourcePVCToJSON(value['lastImportedPVC']),
        'sourceFormat': value['sourceFormat'],
    };
}

