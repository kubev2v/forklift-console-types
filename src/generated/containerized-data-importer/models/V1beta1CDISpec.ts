/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
import type { V1beta1ComponentConfig } from './V1beta1ComponentConfig';
import {
    V1beta1ComponentConfigFromJSON,
    V1beta1ComponentConfigFromJSONTyped,
    V1beta1ComponentConfigToJSON,
} from './V1beta1ComponentConfig';
import type { V1beta1CDIConfigSpec } from './V1beta1CDIConfigSpec';
import {
    V1beta1CDIConfigSpecFromJSON,
    V1beta1CDIConfigSpecFromJSONTyped,
    V1beta1CDIConfigSpecToJSON,
} from './V1beta1CDIConfigSpec';
import type { V1beta1CustomizeComponents } from './V1beta1CustomizeComponents';
import {
    V1beta1CustomizeComponentsFromJSON,
    V1beta1CustomizeComponentsFromJSONTyped,
    V1beta1CustomizeComponentsToJSON,
} from './V1beta1CustomizeComponents';
import type { V1beta1CDICertConfig } from './V1beta1CDICertConfig';
import {
    V1beta1CDICertConfigFromJSON,
    V1beta1CDICertConfigFromJSONTyped,
    V1beta1CDICertConfigToJSON,
} from './V1beta1CDICertConfig';
import type { ApiNodePlacement } from './ApiNodePlacement';
import {
    ApiNodePlacementFromJSON,
    ApiNodePlacementFromJSONTyped,
    ApiNodePlacementToJSON,
} from './ApiNodePlacement';

/**
 * CDISpec defines our specification for the CDI installation
 * @export
 * @interface V1beta1CDISpec
 */
export interface V1beta1CDISpec {
    /**
     * 
     * @type {V1beta1CDICertConfig}
     * @memberof V1beta1CDISpec
     */
    certConfig?: V1beta1CDICertConfig;
    /**
     * Clone strategy override: should we use a host-assisted copy even if snapshots are available?
     * @type {string}
     * @memberof V1beta1CDISpec
     */
    cloneStrategyOverride?: string;
    /**
     * 
     * @type {V1beta1CDIConfigSpec}
     * @memberof V1beta1CDISpec
     */
    config?: V1beta1CDIConfigSpec;
    /**
     * 
     * @type {V1beta1CustomizeComponents}
     * @memberof V1beta1CDISpec
     */
    customizeComponents?: V1beta1CustomizeComponents;
    /**
     * PullPolicy describes a policy for if/when to pull a container image
     * 
     * Possible enum values:
     *  - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
     *  - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
     *  - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
     * @type {string}
     * @memberof V1beta1CDISpec
     */
    imagePullPolicy?: V1beta1CDISpecImagePullPolicyEnum;
    /**
     * 
     * @type {V1beta1ComponentConfig}
     * @memberof V1beta1CDISpec
     */
    infra?: V1beta1ComponentConfig;
    /**
     * PriorityClass of the CDI control plane
     * @type {string}
     * @memberof V1beta1CDISpec
     */
    priorityClass?: string;
    /**
     * CDIUninstallStrategy defines the state to leave CDI on uninstall
     * @type {string}
     * @memberof V1beta1CDISpec
     */
    uninstallStrategy?: string;
    /**
     * 
     * @type {ApiNodePlacement}
     * @memberof V1beta1CDISpec
     */
    workload?: ApiNodePlacement;
}


/**
 * @export
 */
export const V1beta1CDISpecImagePullPolicyEnum = {
    Always: 'Always',
    IfNotPresent: 'IfNotPresent',
    Never: 'Never'
} as const;
export type V1beta1CDISpecImagePullPolicyEnum = typeof V1beta1CDISpecImagePullPolicyEnum[keyof typeof V1beta1CDISpecImagePullPolicyEnum];


/**
 * Check if a given object implements the V1beta1CDISpec interface.
 */
export function instanceOfV1beta1CDISpec(value: object): value is V1beta1CDISpec {
    return true;
}

export function V1beta1CDISpecFromJSON(json: any): V1beta1CDISpec {
    return V1beta1CDISpecFromJSONTyped(json, false);
}

export function V1beta1CDISpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1CDISpec {
    if (json == null) {
        return json;
    }
    return {
        
        'certConfig': json['certConfig'] == null ? undefined : V1beta1CDICertConfigFromJSON(json['certConfig']),
        'cloneStrategyOverride': json['cloneStrategyOverride'] == null ? undefined : json['cloneStrategyOverride'],
        'config': json['config'] == null ? undefined : V1beta1CDIConfigSpecFromJSON(json['config']),
        'customizeComponents': json['customizeComponents'] == null ? undefined : V1beta1CustomizeComponentsFromJSON(json['customizeComponents']),
        'imagePullPolicy': json['imagePullPolicy'] == null ? undefined : json['imagePullPolicy'],
        'infra': json['infra'] == null ? undefined : V1beta1ComponentConfigFromJSON(json['infra']),
        'priorityClass': json['priorityClass'] == null ? undefined : json['priorityClass'],
        'uninstallStrategy': json['uninstallStrategy'] == null ? undefined : json['uninstallStrategy'],
        'workload': json['workload'] == null ? undefined : ApiNodePlacementFromJSON(json['workload']),
    };
}

export function V1beta1CDISpecToJSON(value?: V1beta1CDISpec | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'certConfig': V1beta1CDICertConfigToJSON(value['certConfig']),
        'cloneStrategyOverride': value['cloneStrategyOverride'],
        'config': V1beta1CDIConfigSpecToJSON(value['config']),
        'customizeComponents': V1beta1CustomizeComponentsToJSON(value['customizeComponents']),
        'imagePullPolicy': value['imagePullPolicy'],
        'infra': V1beta1ComponentConfigToJSON(value['infra']),
        'priorityClass': value['priorityClass'],
        'uninstallStrategy': value['uninstallStrategy'],
        'workload': ApiNodePlacementToJSON(value['workload']),
    };
}

