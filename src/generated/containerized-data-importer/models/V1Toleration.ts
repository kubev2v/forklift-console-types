/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 * @export
 * @interface V1Toleration
 */
export interface V1Toleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     * 
     * Possible enum values:
     *  - `"NoExecute"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.
     *  - `"NoSchedule"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.
     *  - `"PreferNoSchedule"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
     * @type {string}
     * @memberof V1Toleration
     */
    effect?: V1TolerationEffectEnum;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     * @type {string}
     * @memberof V1Toleration
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     * 
     * Possible enum values:
     *  - `"Equal"`
     *  - `"Exists"`
     * @type {string}
     * @memberof V1Toleration
     */
    operator?: V1TolerationOperatorEnum;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * @type {number}
     * @memberof V1Toleration
     */
    tolerationSeconds?: number;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * @type {string}
     * @memberof V1Toleration
     */
    value?: string;
}


/**
 * @export
 */
export const V1TolerationEffectEnum = {
    NoExecute: 'NoExecute',
    NoSchedule: 'NoSchedule',
    PreferNoSchedule: 'PreferNoSchedule'
} as const;
export type V1TolerationEffectEnum = typeof V1TolerationEffectEnum[keyof typeof V1TolerationEffectEnum];

/**
 * @export
 */
export const V1TolerationOperatorEnum = {
    Equal: 'Equal',
    Exists: 'Exists'
} as const;
export type V1TolerationOperatorEnum = typeof V1TolerationOperatorEnum[keyof typeof V1TolerationOperatorEnum];


/**
 * Check if a given object implements the V1Toleration interface.
 */
export function instanceOfV1Toleration(value: object): value is V1Toleration {
    return true;
}

export function V1TolerationFromJSON(json: any): V1Toleration {
    return V1TolerationFromJSONTyped(json, false);
}

export function V1TolerationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Toleration {
    if (json == null) {
        return json;
    }
    return {
        
        'effect': json['effect'] == null ? undefined : json['effect'],
        'key': json['key'] == null ? undefined : json['key'],
        'operator': json['operator'] == null ? undefined : json['operator'],
        'tolerationSeconds': json['tolerationSeconds'] == null ? undefined : json['tolerationSeconds'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function V1TolerationToJSON(value?: V1Toleration | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'effect': value['effect'],
        'key': value['key'],
        'operator': value['operator'],
        'tolerationSeconds': value['tolerationSeconds'],
        'value': value['value'],
    };
}

