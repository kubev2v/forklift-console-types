/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
import type { V1Toleration } from './V1Toleration';
import {
    V1TolerationFromJSON,
    V1TolerationFromJSONTyped,
    V1TolerationToJSON,
} from './V1Toleration';
import type { V1Affinity } from './V1Affinity';
import {
    V1AffinityFromJSON,
    V1AffinityFromJSONTyped,
    V1AffinityToJSON,
} from './V1Affinity';

/**
 * NodePlacement describes node scheduling configuration.
 * @export
 * @interface ApiNodePlacement
 */
export interface ApiNodePlacement {
    /**
     * 
     * @type {V1Affinity}
     * @memberof ApiNodePlacement
     */
    affinity?: V1Affinity;
    /**
     * nodeSelector is the node selector applied to the relevant kind of pods It specifies a map of key-value pairs: for the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
     * @type {{ [key: string]: string; }}
     * @memberof ApiNodePlacement
     */
    nodeSelector?: { [key: string]: string; };
    /**
     * tolerations is a list of tolerations applied to the relevant kind of pods See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info. These are additional tolerations other than default ones.
     * @type {Array<V1Toleration>}
     * @memberof ApiNodePlacement
     */
    tolerations?: Array<V1Toleration>;
}

/**
 * Check if a given object implements the ApiNodePlacement interface.
 */
export function instanceOfApiNodePlacement(value: object): value is ApiNodePlacement {
    return true;
}

export function ApiNodePlacementFromJSON(json: any): ApiNodePlacement {
    return ApiNodePlacementFromJSONTyped(json, false);
}

export function ApiNodePlacementFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiNodePlacement {
    if (json == null) {
        return json;
    }
    return {
        
        'affinity': json['affinity'] == null ? undefined : V1AffinityFromJSON(json['affinity']),
        'nodeSelector': json['nodeSelector'] == null ? undefined : json['nodeSelector'],
        'tolerations': json['tolerations'] == null ? undefined : ((json['tolerations'] as Array<any>).map(V1TolerationFromJSON)),
    };
}

export function ApiNodePlacementToJSON(value?: ApiNodePlacement | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'affinity': V1AffinityToJSON(value['affinity']),
        'nodeSelector': value['nodeSelector'],
        'tolerations': value['tolerations'] == null ? undefined : ((value['tolerations'] as Array<any>).map(V1TolerationToJSON)),
    };
}

